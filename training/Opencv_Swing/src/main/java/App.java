import org.opencv.core.*;
import org.opencv.highgui.Highgui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.videoio.VideoCapture;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    static boolean running = true;

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    public static void main(String[] args) {
        System.out.println("Welcome to OpenCV " + Core.VERSION);
        Mat m = new Mat(5, 10, CvType.CV_8UC1, new Scalar(0));
        System.out.println("OpenCV Mat: " + m);
        Mat mr1 = m.row(1);
        mr1.setTo(new Scalar(1));
        Mat mc5 = m.col(5);
        mc5.setTo(new Scalar(5));
        System.out.println("OpenCV Mat data:\n" + m.dump());

        VideoCapture capt = new VideoCapture();
        System.out.println("Opening Capture");
        capt.open(0);
        System.out.println("Opened Capture");

        RoboGui.getInstance().setAllClosed(() -> running = false);
        RoboGui.debug = true;

        RoboGui.getInstance().addWindowListener("NormalFrame", new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                RoboGui.getInstance().close("NormalFrame");
            }
        });
        RoboGui.getInstance().addWindowListener("MotionFrame", new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                RoboGui.getInstance().close("MotionFrame");
            }
        });

        Mat currImg = new Mat();
        Mat oldImg = new Mat();
        Mat partImg = new Mat();
        Mat actImg = new Mat();

        capt.read(oldImg);
        while(running){
            capt.read(currImg);
            int width = currImg.width() / 10;
            int height = currImg.height() / 10;
            for(int i = 0; i < 10; i++){
                for(int j = 0; j < 10; j++){
                    if((i + j) % 2 == 0){
                        partImg = currImg.submat(width * i, width * i + width, height * j, height * j + height);
                        Core.bitwise_not(partImg, partImg);
                    }
                }
            }
            oldImg = currImg.clone();
            RoboGui.getInstance().showExists("NormalFrame", currImg);
            RoboGui.getInstance().showExists("MotionFrame", actImg);
        }

        capt.release();
        RoboGui.getInstance().close();
    }
}
