import matmath.ConcurrentMatMath;
import org.opencv.core.*;
import org.opencv.videoio.VideoCapture;
import robogui.RoboGui;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    static boolean running = true;

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    public static void main(String[] args) {
        System.out.println("Welcome to OpenCV " + Core.VERSION);
        Mat m = new Mat(5, 10, CvType.CV_8UC1, new Scalar(0));
        System.out.println("OpenCV Mat: " + m);
        Mat mr1 = m.row(1);
        mr1.setTo(new Scalar(1));
        Mat mc5 = m.col(5);
        mc5.setTo(new Scalar(5));
        System.out.println("OpenCV Mat data:\n" + m.dump());

        VideoCapture capt = new VideoCapture();
        System.out.println("Opening Capture");
        capt.open(0);
        System.out.println("Opened Capture");

        RoboGui.getInstance().setAllClosed(() -> running = false);
        RoboGui.debug = true;

        RoboGui.getInstance().addWindowListener("MotionFrame", new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                RoboGui.getInstance().close("MotionFrame");
            }
        });

        Mat currImg = new Mat();
        Mat oldImg = new Mat();
        Mat actImg;
        ConcurrentMatMath cmm;

        capt.read(oldImg);
        while(running){
            cmm = new ConcurrentMatMath(8);
            capt.read(currImg);
            actImg = currImg.clone();

            cmm.mutateMat((x, y, ci) -> {

            }, currImg, actImg);

            RoboGui.getInstance().showExists("MotionFrame", actImg);
        }

        capt.release();
        RoboGui.getInstance().close();
    }
}
